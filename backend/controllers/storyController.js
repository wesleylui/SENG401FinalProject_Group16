const storyService = require("../services/storyService");

// Story generate API
const generate = async (req, res) => {
  try {
    const { storyLength, storyGenre, storyDescription } = req.body;
    console.log("Received payload in generate:", req.body);

    const { storyTitle, story } = await storyService.generate(
      storyLength,
      storyGenre,
      storyDescription
    );

    console.log(`Generated story: ${storyTitle}\n${story}`);

    res.status(201).json({ storyTitle, story });
  } catch (error) {
    console.error("Story generation error:", error);
    res.status(500).json({ error: "Story generation failed" });
  }
};

// get all stories for a userId
const getStoriesByUserId = async (req, res) => {
  try {
    const { userId } = req.params;
    const stories = await storyService.getStoriesByUserId(userId);
    res.status(200).json(stories);
  } catch (error) {
    console.error("Error fetching stories:", error);
    res.status(500).json({ error: "Failed to fetch stories" });
  }
};

// save story generated by user
const saveStory = async (req, res) => {
  try {
    const {
      userId,
      storyTitle,
      storyLength,
      storyGenre,
      storyDescription,
      story,
    } = req.body;

    // Validate input
    if (
      !userId ||
      !storyTitle ||
      !storyLength ||
      !storyGenre ||
      !storyDescription ||
      !story
    ) {
      console.error("Validation failed: Missing required fields");
      return res.status(400).json({ error: "All fields are required" });
    }

    await storyService.saveStory(
      userId,
      storyTitle,
      storyLength,
      storyGenre,
      storyDescription,
      story
    ); // Pass story to the service layer
    res.status(201).json({ message: "Story saved successfully" });
  } catch (error) {
    console.error("Error saving story:", error); // Log the error details
    res.status(500).json({ error: "Failed to save story" });
  }
};

const deleteStoryById = async (req, res) => {
  try {
    const { id } = req.params;
    await storyService.deleteStoryById(id);
    res.status(200).json({ message: "Story deleted successfully" });
  } catch (error) {
    console.error("Error deleting story:", error);
    res.status(500).json({ error: "Failed to delete story" });
  }
};

const continueStory = async (req, res) => {
  try {
    const {
      originalStory,
      storyLength,
      storyGenre,
      plotProgression,
      newCharacter,
      moral,
      endingDirection,
    } = req.body;

    console.log("Received payload in continueStory:", req.body);

    const { continuation } = await storyService.continueStory(
      originalStory,
      storyLength,
      storyGenre,
      plotProgression,
      newCharacter,
      moral,
      endingDirection
    );

    console.log(`Generated continuation: ${continuation}`);

    res.status(201).json({ continuation });
  } catch (error) {
    console.error("Story continuation error:", error);
    res.status(500).json({ error: "Story continuation failed" });
  }
};

module.exports = { generate, getStoriesByUserId, saveStory, deleteStoryById, continueStory };
